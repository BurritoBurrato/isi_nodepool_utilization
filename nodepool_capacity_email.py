# Run 'isi storagepool list' and send email if a nodepool capacity exceeds threshold
# This is meant to be run from a cluster node directly and not remotely
#
# Tested on OneFS 8.0.0.4 with default Python 2.6.1 libraries
#
# joshua.lay@dell.com
#


from optparse import OptionParser
import subprocess
import socket
import time
import os
import sys
from isi.app.lib.emailer import Emailer


usage = "Usage: %prog"
parser = OptionParser(usage=usage, version='%prog 0.2', description="Send email if a nodepool exceeds specified threshold")
parser.add_option('-f', '--from', '--sender', dest='FROM', help="email sender (From:)")
parser.add_option('-t', '--to', '--recipients', dest='TO', help="email recipient (To:)", action='append', default=[])
parser.add_option('-s', '--subject', dest='SUBJECT', help="email subject (Subject:). Default = Isilon Node Pool Utililzation Exceeds Threshold", default="Isilon Node Pool Utilization Exceeds Threshold")
parser.add_option('-T', '--threshold', dest='THRESHOLD', help="Threshold for any nodepool in percent.  e.g. 74 = 74%.  Default = 80%.  This same threshold applies to all node pools", type='int', default=80)
#parser.add_option('--test') #TODO
opts, args = parser.parse_args()


if (opts.FROM == None):
    fqdn = socket.getfqdn()
    opts.FROM = "donotreply@%s" % fqdn

if (opts.TO == None) or (len(opts.TO) < 1):    
	parser.error("Unable to send mail without at least one recipient")
	sys.exit(1)

HOSTNAME = socket.gethostname()
CLUSTER_NAME = HOSTNAME.split('-')[0]
DATE = time.ctime()


def isi_storagepool_list():
    '''Run 'isi storagepool list' command and return command output string'''
    cmd = ['isi', 'storagepool', 'list']
    p = subprocess.Popen(cmd, stdout=subprocess.PIPE)
    output = p.communicate()[0]
    
    return output
    

def parse_storagepools(output):
    '''Take in output string from 'isi storagepool list' command and return list of node pools data'''
    lines = output.splitlines()
    np_lines = lines[2:-2]
    pools = []
    for p in np_lines:
        pools.append(p.split())
    
    return pools
        

CMD_OUTPUT = isi_storagepool_list()
POOLS = parse_storagepools(CMD_OUTPUT)


body = '''\
<html>
    <body>
        <p>Do not reply to this message</p>
        <p>Cluster <samp>'{cluster}'</samp> has one or more node pools that have exceeded a utilization threshold of {pct}%.</p>
        <p>Date/Time: <samp>{date}</samp></p>
        <p>This message was generated by script: <code>{script}</code></p>
        <p>\n</p>
        <pre>{hostname}# isi storagepool list \n{output}</pre>
    </body>
</html>
'''.format(cluster=CLUSTER_NAME, pct=opts.THRESHOLD, date=DATE, script=os.path.abspath(__file__), output=CMD_OUTPUT, hostname=HOSTNAME)


def main():
    #print("executing main")
    send_mail = False

    # Check if any node pools exceed threshold
    for pool in POOLS:
        hdd_pct = float(pool[5].strip('%'))
        if (hdd_pct >= opts.THRESHOLD):
            send_mail = True

    # Send email
    if (send_mail == True):
        try:
            Emailer.send_email(opts.TO, body, opts.FROM, opts.SUBJECT)
        except:
            print("Error sending email.")
            sys.exit(1)

    sys.exit(0)



if __name__ == "__main__":
    main()
